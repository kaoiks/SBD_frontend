@page "/invoices/create"
@using Microsoft.Extensions.Logging
@inject ILogger<InvoiceCreate> Logger
@using BlazorApp1.Services
@using BlazorApp1.Data
@inject InvoiceService InvoiceService
@inject ContractorService ContractorService
@inject NavigationManager NavManager
@inject IToastService toastService
@using Blazored.Toast.Configuration


@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations

<EditForm Model="@invoice" OnValidSubmit="@HandleValidSubmit">

    <h3>Add Invoice</h3>
    <hr />
    <DataAnnotationsValidator />


    <div class="form-group row">
        <label class="col-sm-2 col-form-label">
            Invoice Number:
        </label>
        <div class="col-sm-5">
            <InputText id="invoice_number" Class="form-control" placeholder="Invoice Number" @bind-Value="invoice.invoice_number" />
            <ValidationMessage For="@(() => invoice.invoice_number)"></ValidationMessage>
        </div>
    </div>
    <br />
    <div class="form-group row">
        <label class="col-sm-2 col-form-label">
            Date:
        </label>
        <div class="col-sm-5">
            <InputDate class="form-control" placeholder="Date" @bind-Value="invoice.date" />
            <ValidationMessage For="@(() => invoice.date)"></ValidationMessage>
        </div>
    </div>
    <br />
    <div class="form-group row">
        <label class="col-sm-2 col-form-label">
            Amount:
        </label>
        <div class="col-sm-5">
            <InputNumber class="form-control" placeholder="Amount" @bind-Value="invoice.amount" />
            <ValidationMessage For="@(() => invoice.amount)"></ValidationMessage>
        </div>
    </div>
    <br />

    <div class="form-group row">

        @if (contractors == null)
        {

        }
        else
        {
            <label for="contractor" class="col-sm-2 col-form-label ">
                Contractor:
            </label>
            <div class="col-sm-5">

                <InputSelect @bind-Value=invoice.contractor class="form-select" style="color:darkgray;">
                    <option value="NULL">--Choose Contractor--</option>
                    @foreach (var contractor in contractors)
                    {
                        <option value="@contractor.nip" style="color:black;">@contractor.name</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => invoice.contractor)"></ValidationMessage>
            </div>



        }


    </div>
    <br />
    <div class="row">
        <div class="col-md-12 text-right">
            <button type="submit" class="btn btn-success">Submit</button>
        </div>
    </div>

    <BlazoredToasts Position="ToastPosition.BottomRight"
                    Timeout="10"
                    IconType="IconType.FontAwesome"
                    SuccessClass="success-toast-override"
                    SuccessIcon="fa fa-thumbs-up"
                    ErrorIcon="fa fa-bug" />

</EditForm>
@code {


    private FormInvoice invoice = new() {date=DateTime.Now};

    private Contractor[]? contractors;

    protected override async Task OnInitializedAsync()
    {
        var contractors_service = await ContractorService.GetContractorsAsync();

        contractors = contractors_service.ToArray();

    }

    private async void HandleValidSubmit()
    {
        Logger.LogInformation("HandleValidSubmit called");

     

        var result = await InvoiceService.AddInvoiceAsync(invoice);

        if (result == null)
        {

        }
        else
        {
            toastService.ShowSuccess("Invoice created successfully.");
            NavManager.NavigateTo("/invoices");
        }
    }


}

