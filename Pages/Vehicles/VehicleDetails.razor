@page "/vehicles/{id}"

<PageTitle>Vehicles</PageTitle>

@using BlazorApp1.Data
@using BlazorApp1.Services

@inject VehicleService VehicleService
@inject RepairService RepairService

@inject InsuranceService InsuranceService
@inject RouteService RouteService
@inject NavigationManager NavManager


@if (vehicle == null)
{
}
else{
     <h3>Details of the Selected Vehicle</h3>
        <hr />
        <div class="form-group row">
            <label class="col-sm-2 col-form-label">
                VIN:
            </label>
            <div class="col-sm-5">
                <Text Class="form-control">@vehicle.vin</Text>            
            </div>
        </div>
        <br />
        <div class="form-group row">
            <label class="col-sm-2 col-form-label">
                Kilometers Done:
            </label>
            <div class="col-sm-5">
                 <Text Class="form-control">@vehicle.kilometers_done</Text>             
            </div>
        </div>
        <br />
        <div class="form-group row">
            <label class="col-sm-2 col-form-label">
                Year of Production:
            </label>
            <div class="col-sm-5">
                 <Text Class="form-control">@vehicle.year_of_production</Text>  
            </div>
        </div>
        <br />
        <div class="form-group row">
            <label class="col-sm-2 col-form-label">
                Car Review:
            </label>
           
        @if (DateTime.Parse(vehicle.car_review)<DateTime.Now)
        { <div class="col-sm-5">
                <Text Class="form-control" style="color: red">@vehicle.car_review (Needed new car review) </Text>
            </div>
        }
        else
        { <div class="col-sm-5">
                <Text Class="form-control">@vehicle.car_review </Text>
                </div>
        }
        </div>
        <br />
         <div class="form-group row">
            <label class="col-sm-2 col-form-label">
                Fuel Usage:
            </label>
            <div class="col-sm-5">
                 <Text Class="form-control">@vehicle.fuel_usage</Text>  
            </div>
        </div>
        <br />
         <div class="form-group row">
            <label class="col-sm-2 col-form-label">
                Insurance Valid Until:
            </label>

        @if (insurance_valid_until == "New insurance needed")
        { <div class="col-sm-5">
                <Text Class="form-control" style="color: red">@insurance_valid_until </Text>
            </div>
        }
        else
        { <div class="col-sm-5">
                <Text Class="form-control">@insurance_valid_until </Text>
                </div>
        }
        </div>
        <br />
        <div>
        <button class="btn btn-outline-primary" type="button" @onclick="Update_Click">
        Edit
        </button>
    <button class="btn btn-outline-danger" type="button" @onclick="Delete_Click">
        Delete
    </button>
        </div>
        
    
}
@code {
    [Parameter]
    public string? id { get; set; }

    private string insurance_valid_until;
    private Insurance[]? vehicle_insurance;
    private Vehicle? vehicle;
    private Trail[]? routes;
    private Insurance[]? insurances;
    private Repair[]? repairs;
    protected override async Task OnInitializedAsync()
    {
        var vehicles_service = await VehicleService.GetVehicleAsync(id);

        vehicle = vehicles_service;

        vehicle_insurance = vehicles_service.insurances.ToArray();
       
        insurance_valid_until = "1800-01-01";
        
        
        if (vehicle_insurance != null)
        {
            for (int i = 0; i < vehicle_insurance.Length; i++)
            {
                if (DateTime.Parse(vehicle_insurance[i].end_date) > DateTime.Parse(insurance_valid_until))
                {
                    insurance_valid_until = vehicle_insurance[i].end_date.ToString();
                }
            }
            if (DateTime.Parse(insurance_valid_until)<DateTime.Now)
            {
                insurance_valid_until = "New insurance needed";
            }
        }
        else
        {
            insurance_valid_until = "New insurance needed";
        }
       

        var routes_service = await RouteService.GetRoutesAsync();

        routes = routes_service.ToArray();

        var insurances_service = await InsuranceService.GetInsurancesAsync();

        insurances = insurances_service.ToArray();

        var repairs_service = await RepairService.GetRepairsAsync();

        repairs = repairs_service.ToArray();

        

    }

    protected async Task Delete_Click()
    {
        if(routes!=null)
        {
            for (int i = 0; i < routes.Length; i++)
            {
                if (routes[i].vehicle.vin == vehicle.vin)
                {
                    await RouteService.DeleteRouteAsync(routes[i].route_id);
                }
            }
        }
        
        if(insurances!=null)
        {
             for (int i = 0; i < insurances.Length; i++)
                {
                    if (insurances[i].vehicle == vehicle.vin)
                    {
                        await InsuranceService.DeleteInsuranceAsync(insurances[i].insurance_number);
                    }
                }
        }
       
        if(repairs!=null)
        {
            for (int i = 0; i < repairs.Length; i++)
            {
                if (repairs[i].vehicle == vehicle.vin)
                {

                    await RepairService.DeleteRepairAsync(repairs[i].id);
                }
            }
        }
        
        
        await VehicleService.DeleteVehicleAsync(vehicle.vin);
        NavManager.NavigateTo("/vehicles");
    }
    protected async Task Update_Click()
    {
        NavManager.NavigateTo("/vehicles/update/" + id);
    }
}