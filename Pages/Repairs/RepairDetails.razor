@page "/repairs/{id}"

<PageTitle>Repairs</PageTitle>

@using BlazorApp1.Data
@using BlazorApp1.Services
@using BlazorTable
@inject RepairService RepairService
@inject RepairCostService RepairCostService

<h1>@id</h1>

@if (repair == null)
{
}
else
{
    <div scope="row">@repair.repair_date</div>
    <div scope="row">@repair.description</div>
    <div scope="row">@repair.vehicle</div>

                

}
<a href="costs/create/{id}" class="btn btn-primary" role="button">Add Cost</a>
@if (repairCosts == null)
{
<p><em>Loading...</em></p>
}
else
{

    <Table TableItem="RepairCost" Items="repairCosts" PageSize="100">
        <Column TableItem="RepairCost" Title="Repair Cost ID" Field="@(x => x.id)" Sortable="true" Filterable="true" Width="10%" />
        <Column TableItem="RepairCost" Title="Repair Date" Field="@(x => x.date)" Sortable="true" Filterable="true" Width="20%" />
        <Column TableItem="RepairCost" Title="Invoice Number" Field="@(x => x.invoice_id)" Sortable="true" Filterable="true" Width="20%" />
        <Column TableItem="RepairCost" Title="Amount" Field="@(x => x.amount)" Sortable="true" Filterable="true" Width="20%" />
                    

    <Pager ShowPageNumber="true" ShowTotalCount="true" />
</Table>
}
@code {
    
    [Parameter]
    public string? id { get; set; }


    private RepairCost[]? repairCosts;


    private Repair? repair;

    protected override async Task OnInitializedAsync()
    {

      


        var repairs_service = await RepairService.GetRepairAsync(id);

        repair = repairs_service;
        repairCosts = repair.repair_costs.ToArray();
    }
}

