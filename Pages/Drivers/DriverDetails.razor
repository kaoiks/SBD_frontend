@page "/drivers/{id}"

<PageTitle>Drivers</PageTitle>

@using BlazorApp1.Data
@using BlazorApp1.Services

@inject DriverService DriverService
@inject AddressService AddressService
@inject RouteService RouteService
@inject NavigationManager NavManager



@if (driver == null)
{
}
else
{
    <h3>Details of the Selected Driver</h3>
        <hr />
        <div class="form-group row">
            <label class="col-sm-2 col-form-label">
                Name:
            </label>
            <div class="col-sm-5">
                <Text Class="form-control">@driver.name</Text>            
            </div>
        </div>
        <br />
        <div class="form-group row">
            <label class="col-sm-2 col-form-label">
                Surname:
            </label>
            <div class="col-sm-5">
                 <Text Class="form-control">@driver.surname</Text>             
            </div>
        </div>
        <br />
        <div class="form-group row">
            <label class="col-sm-2 col-form-label">
                PESEL:
            </label>
            <div class="col-sm-5">
                 <Text Class="form-control">@driver.pesel</Text>  
            </div>
        </div>
        <br />
        <div class="form-group row">
            <label class="col-sm-2 col-form-label">
                Street:
            </label>
            <div class="col-sm-5">
                 <Text Class="form-control">@driver.address.street</Text>  

            </div>
        </div>

        <br />
        <div class="form-group row">
            <label class="col-sm-2 col-form-label">
                City:
            </label>
            <div class="col-sm-5">
            <Text Class="form-control">@driver.address.city</Text>  
            </div>
        </div>
        <br />
        <div class="form-group row">
            <label class="col-sm-2 col-form-label">
                Postal Code:
            </label>
            <div class="col-sm-5">
                 <Text Class="form-control">@driver.address.postal_code</Text>  
            </div>
        </div>
        <br />
        <div class="form-group row">
            <label class="col-sm-2 col-form-label">
                Date of Birth:
            </label>
            <div class="col-sm-5">
                <Text Class="form-control">@driver.date_of_birth</Text>            
            </div>
        </div>
        <br />
        <div class="form-group row">
            <label class="col-sm-2 col-form-label">
                Driver License Number:
            </label>
            <div class="col-sm-5">
                 <Text Class="form-control">@driver.driver_license_number</Text>             
            </div>
        </div>
        <br />
        <div class="form-group row">
            <label class="col-sm-2 col-form-label">
            Exp. Date of Qualification Certificate:
            </label>
            <div class="col-sm-5">
                <Text Class="form-control">@driver.date_qualification_certificate</Text>            
            </div>
        </div>
        <br />
        <div class="form-group row">
            <label class="col-sm-2 col-form-label">
            Exp. Date of BHP Course:
            </label>
            <div class="col-sm-5">
                 <Text Class="form-control">@driver.date_bhp_course</Text>             
            </div>
        </div>
        <br />
           <div>
    <button class="btn btn-outline-primary" type="button" @onclick="Update_Click">
        Edit
    </button>
        <button class="btn btn-outline-danger" type="button" @onclick="Delete_Click">
            Delete
        </button>
        </div>
    
}






@code {
    [Parameter]
    public string? id { get; set; }



    private Driver? driver;
    private Trail[]? routes;
    protected override async Task OnInitializedAsync()
    {
        var drivers_service = await DriverService.GetDriverAsync(id);


        driver = drivers_service;

        var routes_service = await RouteService.GetRoutesAsync();

        routes = routes_service.ToArray();
    }

    protected async Task Delete_Click()
    {
        if(routes!=null)
        {
            for (int i = 0; i < routes.Length; i++)
            {
                if (routes[i].driver.pesel == driver.pesel)
                {
                    await RouteService.DeleteRouteAsync(routes[i].route_id);
                }
            }
        }
        
        
        await AddressService.DeleteAddressAsync(driver.address.id);
        await DriverService.DeleteDriverAsync(driver.pesel);
        NavManager.NavigateTo("/drivers");
    }
    protected async Task Update_Click()
    {
        NavManager.NavigateTo("/drivers/update/" + id);
    }
}