@page "/contractors/create"
@using Microsoft.AspNetCore.Mvc;
@using Microsoft.Extensions.Logging
@inject ILogger<ContractorCreate> Logger
@using BlazorApp1.Services
@using BlazorApp1.Data
@inject ContractorService ContractorService
@inject AddressService AddressService
@inject NavigationManager NavManager
@inject IToastService toastService
@using Blazored.Toast.Configuration
@using BS.Forms.ValidatorComponent.Components
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations

<EditForm Model="@contractor"  OnValidSubmit="@HandleValidSubmit">
    
    <h3>Add Contractor</h3>
    <hr />
    <DataAnnotationsValidator />
    <CustomValidator @ref="customValidator"></CustomValidator>

    <div class="form-group row">
        <label class="col-sm-2 col-form-label">
            Name:
        </label>
        <div class="col-sm-5">
            <InputText id="name" Class="form-control" placeholder="Name" @bind-Value="contractor.name" />
            <ValidationMessage For="@(() => contractor.name)"></ValidationMessage>
        </div>
    </div>
    <br />
    <div class="form-group row">
        <label class="col-sm-2 col-form-label">
            NIP:
        </label>
        <div class="col-sm-5">
            <InputText asp-for="contractor.nip" class="form-control" placeholder="NIP" @bind-Value="contractor.nip" />
            <ValidationMessage For="@(() => contractor.nip)"></ValidationMessage>
            <span asp-validation-for="contractor.nip" class="text-danger"></span>
        </div>
    </div>
    <br />
   
    <div class="form-group row">
        <label class="col-sm-2 col-form-label">
            Street:
        </label>
        <div class="col-sm-5">
            <InputText class="form-control" placeholder="Street" @bind-Value="address.street" />
            <ValidationMessage For="@(() => address.street)"></ValidationMessage>
        </div>
    </div>
 
    <br />
    <div class="form-group row">
        <label class="col-sm-2 col-form-label">
            City:
        </label>
        <div class="col-sm-5">
            <InputText class="form-control" placeholder="City" @bind-Value="address.city" />
            <ValidationMessage For="@(() => address.city)"></ValidationMessage>
        </div>
    </div>
     <br />
    <div class="form-group row">
        <label class="col-sm-2 col-form-label">
            Postal Code:
        </label>
        <div class="col-sm-5">
            <InputText class="form-control" placeholder="Postal Code" @bind-Value="address.postal_code" />
            <ValidationMessage For="@(() => address.postal_code)"></ValidationMessage>
        </div>
    </div>
 
    <br />
    <div class="form-group row">
        <label class="col-sm-2 col-form-label">
            Country ID:
        </label>
        <div class="col-sm-5">
            <InputText class="form-control" placeholder="Country ID" @bind-Value="contractor.country_id" />
            <ValidationMessage For="@(() => contractor.country_id)"></ValidationMessage>
        </div>
    </div>
     <br />
    
   
        <div class="text-right mt-2">
            <button type="submit" class="btn btn-success">Submit</button>
        </div>
    

    <BlazoredToasts Position="ToastPosition.BottomRight"
                    Timeout="10"
                    IconType="IconType.FontAwesome"
                    SuccessClass="success-toast-override"
                    SuccessIcon="fa fa-thumbs-up"
                    ErrorIcon="fa fa-bug" />

</EditForm>



@code {

    private CustomValidator customValidator;

    private FormAddress address = new() { type = 1 };

    private FormContractor contractor = new() ;

    public Contractor[]? contractor_check;

    private async void HandleValidSubmit()
    {
        Logger.LogInformation("HandleValidSubmit called");
       
        var contractor_service = await ContractorService.GetContractorsAsync();
        contractor_check = contractor_service.ToArray();
        int exist = 0;
        for(int i=0;i<contractor_check.Length;i++)
        {
            if (contractor_check[i].nip==contractor.nip)
            {
                exist = 1;
            }
        }
        var errors = new Dictionary<string, List<string>>();
        if (exist == 1)
        {
            errors.Add(nameof(contractor.nip), new List<string> { "This NIP already exists" });
            customValidator.DisplayErrors(errors);
        }
        else
        {
            var result_address = await AddressService.AddAddressAsync(address);


            contractor.address = result_address.id;

            var result = await ContractorService.AddContractorAsync(contractor);

            if (result == null)
            {

            }
            else
            {
                toastService.ShowSuccess("Contractor created successfully.");
                NavManager.NavigateTo("/contractors");
            }
        }
      

        
    }

    


}
